{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "IBM HLASM",
	"patterns": [
		{"include": "#hlasm_syntax"}
	],
	"repository": {
		"hlasm_syntax": {
				"patterns": [
					{
						"include": "#lineTooLong"
					},
					{
						"include": "#continuation"
					},
					{
						"include": "#asmArgumentLine"
					},
					{
						"include": "#asmLineStart"
					}
				]
		},
		"lineTooLong": {
			"_description": "Assembler lines should only be 80 chars, at 81 the entire line should be in error",
			"patterns": [
				{
					"name": "invalid.illegal.hlasm",
					"match": "^.{81,}"  
				}
			]
		},
		"continuation": {
			"_description": "Continuation character that appears in column 72",
			"patterns": [
				{
					"match": "^(.{71,71})(.)(.{8})(.*)$",
					"captures": {
						"1": {
							"_description": "Allow syntax hilighting of the rest of the line",
							"patterns": [
								{"include": "#lineComment"},
								{"include": "#asmArgumentLine"},
								{"include": "#asmLineStart"}
							]
						},
						"2": {
							"patterns": [
								{
									"match": "(\\S)",
									"name": "keyword.other.hlasm"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"match": "(\\d{8})",
									"name": "markup.list.numbered.hlasm"
								},
								{
									"match": "(\\S+)",
									"name": "markup.list.unnumbered.hlasm"
								}
							]
						},
						"4": {
							"patterns": [
								{
									"match": "(.*)",
									"name": "invalid.illegal.hlasm"
								}
							]
						}

					}
				}
			]
		},
		"lineComment": {
			"_description": "All statements that have a * in column 1",
			"patterns": [
				{
					"name": "comment.line.double-slash.hlasm",
					"match": "^(\\*|\\.\\*).*$"
				}
			]
		},
		"asmLineStart": {
			"_description": "The various parts of an assembler line",
			"patterns": [
				{
					"match": "^([^*]\\S*)?\\s+(.*)$",
					"captures": {
						"1": {
							"_description": "The label for a line.",
							"name": "entity.name.function.hlasm"
						},
						"2": {
							"_description": "The assembler instructions for this statement",
							"patterns": [
								{"include": "#asmInstruction"}
							]
						}
					}
				}
			]
		},
		"asmInstruction": {
			"_description": "A simple assembler source statement with 3 things. An instruction, parameters, and comment",
			"patterns": [
				{
					"match": "(\\S+)\\s*(.*)",
					"captures": {
						"1": {
							"name": "keyword.other.hlasm"
						},
						"2": {
							"patterns": [
								{"include": "#asmArguments"}
							]
						}
					}
				}
			]
		},
		"asmArgumentLine": {
			"_description": "This is for a line consisting of only an argument. This implies the previous line was a continuation",
			"patterns": [
				{
					"match": "^\\s{15}(\\S+)(\\s.*)$",
					"captures": {
						"1": {
							"patterns": [
								{"include": "#asmArguments"}
							]
						},
						"2": {
							"name": "comment.line.double-slash.hlasm"
						}
					}
				}
			]
		},
		"asmArguments": {
			"patterns": [
				{
					"_description": "Handle strings in an instruction",
					"match": "(\\S*)('.*')(.*)",
					"captures": {
						"1": {
							"_description": "This group refers to an instruction operator",
							"name": "keyword.control.hlasm",
							"patterns": [
								{
									"include": "#asmSpecialStatements"
								},
								{
									"include": "#operators"
								},
								{
									"include": "#numbers"
								}
							]
						},
						"2": {
							"_description": "A string was found, so we can't be sure this is the end of the line",
							"name": "string.quoted.single.hlasm"
						},
						"3": {
							"_description": "Recursively call this rule to get all patterns.",
							"patterns": [
								{"include": "#asmArguments"}
							]
						}
					}
				},
				{
					"_description": "Handle no strings in instruction",
					"match": "(\\S*)(.*)",
					"captures": {
						"1": {
							"_description": "This group refers to an instruction operator",
							"name": "keyword.control.hlasm",
							"patterns": [
								{
									"include": "#asmSpecialStatements"
								},
								{
									"include": "#operators"
								},
								{
									"include": "#numbers"
								}
							]
						},
						"2": {
							"_description": "The rest of the line is a comment.",
							"name": "comment.line.double-slash.hlasm"
						}
					}
				},
				{
					"_description": "If the current pattern starts with a space, then we should comment the rest of the string",
					"match": "\\s.*",
					"name": "comment.line.double-slash.hlasm"
				}
			]
		},
		"operators": {
			"_description": "marks operators properly",
			"match": "[=(),*]",
			"name": "keyword.operator.hlasm"
		},
		"numbers": {
			"_description": "marks numbers properly",
			"match": "(?<=[=(),*\\s])-?\\d*(?=[=(),*\\s]|$)",
			"name": "constant.numeric.hlasm"
		},
		"asmSpecialStatements": {
			"_description": "allows for special assembler statements",
			"match": "(?<=[=(),*\\s])=?\\d*(A|B|C|D|E|F|G|H|V|X|Z)(L\\d*)?(?=[=(),*\\s]|$)",
			"name": "support.type.hlasm"
		}
	},
	"scopeName": "source.hlasm"
}