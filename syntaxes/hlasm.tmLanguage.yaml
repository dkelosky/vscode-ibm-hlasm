---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: IBM HLASM
patterns:
- include: "#hlasm_syntax"
repository:
  hlasm_syntax:
    patterns:
    - include: "#lineTooLong"
    - include: "#lineComment"
    - include: "#parseLine"
    - include: "#asmArgumentLine"
    - include: "#asmLineStart"
  additionalAsmHighlight:
    patterns:
    - include: "#labels"
    - include: "#asmSpecialStatements"
    - include: "#operators"
    - include: "#numbers"
  lineTooLong:
    # Assembler lines should only be 72 chars, at 73 the entire line should
    # be in error
    patterns:
    - name: invalid.illegal.hlasm
      match: "^.{81,}"
  lineComment:
    # All statements that have a * in column 1
    patterns:
    - name: comment.line.double-slash.hlasm
      match: "^(\\*.{70,70})(.*)"
      captures:
        '1':
          name: comment.line.double-slash.hlasm
        '2':
          patterns:
          - match: "\\s(.{0,8})"
            captures:
              '1':
                # SEQUENCE NUMBERS!!!!!
                patterns:
                - include: "#sequenceNumbers"
          - match: "([^\\s])(.{0,8})"
            captures:
              '1':
                name: invalid.illegal.hlasm
              '2':
                # SEQUENCE NUMBERS!!!!!
                patterns:
                - include: "#sequenceNumbers"
    - name: comment.line.double-slash.hlasm
      match: "\\*.*"
  parseLine:
    patterns:
    - # Continuation character that appears in column 72
      match: "^(.{71,71})([^\\s])(.{0,8})"
      captures:
        '1':
          # Allow syntax highlighting of the rest of the line
          patterns:
          - include: "#asmArgumentLine"
          - include: "#asmLineStart"
        '2':
          name: keyword.other.hlasm
        '3':
          # SEQUENCE NUMBERS!!!!!
          patterns:
          - include: "#sequenceNumbers"
        '5':
          # This next capture group is the entire next line
          patterns:
          - match: "\\S.*"
            name: invalid.illegal
    # Sequence numbers for non-continuation lines
    - match: "^(.{71,71})(\\s?)(.{0,8})$"
      captures:
        '1':
          # Allow syntax highlighting of the rest of the line
          patterns:
          - include: "#asmArgumentLine"
          - include: "#asmLineStart"
        '3':
          # SEQUENCE NUMBERS!!!!!
          patterns:
          - include: "#sequenceNumbers"
  asmLineStart:
    # The various parts of an assembler line
    patterns:
    - match: "^([^*]\\S*)?\\s+(.*)$"
      captures:
        '1':
          # The label for a line.
          name: entity.name.function.hlasm
        '2':
          # The assembler instructions for this statement
          patterns:
          - include: "#asmInstruction"
  asmInstruction:
    # A simple assembler source statement with 3 things. An instruction,
    # parameters, and comment
    patterns:
    - match: "(\\S+)\\s*(.*)"
      captures:
        '1':
          name: keyword.other.hlasm
        '2':
          patterns:
          - include: "#asmArguments"
  asmArgumentLine:
    # This is for a line consisting of only an argument. This implies
    # the previous line was a continuation
    patterns:
    # A line matching this syntax should follow the argument syntax
    - match: "^\\s+(\\S+=.*)$"
      captures:
        '1':
          patterns:
          - include: "#asmArguments"
  asmArguments:
    patterns:
    - include: "#stringType"
    - include: "#quoteType"
    # Handle no strings in instruction
    - match: "(\\S*)(.*)"
      captures:
        '1':
          # This group refers to an instruction operator
          name: keyword.control.hlasm
          patterns:
          - include: "#additionalAsmHighlight"
        '2':
          # The rest of the line is a comment.
          name: comment.line.double-slash.hlasm
    # If the current pattern starts with a space, then we should comment
    #  the rest of the string
    - match: "\\s.*"
      name: comment.line.double-slash.hlasm
  stringType:
    patterns:
    # Handle strings in an instruction
    - match: "(\\S*?)('.*?')(.*)"
      captures:
        '1':
          # This group refers to an instruction operator
          name: keyword.control.hlasm
          patterns:
          - include: "#additionalAsmHighlight"
        '2':
          # A string was found, so we can't be sure this is the end of
          #  the line
          name: string.quoted.single.hlasm
        '3':
          # Recursively call this rule to get all patterns.
          patterns:
          - include: "#asmArguments"
  quoteType:
    patterns:
    # Handle a length instruction
    - match: "(\\S*?)([LKNT]')(.*)"
      captures:
        '1':
          # This group refers to an instruction operator
          name: keyword.control.hlasm
          patterns:
          - include: "#additionalAsmHighlight"
        '2':
          # Highlight the L' operator as a type
          name: support.type.hlasm
        '3':
          # Recursively call this rule to get all patterns.
          patterns:
          - include: "#asmArguments"
  labels:
    # marks special labels in the code
    match: "[*]"
    name: support.function.hlasm
  operators:
    # marks operators properly
    match: "[=(),+]"
    name: keyword.operator.hlasm
  numbers:
    # marks numbers properly
    match: "(?<=[=(),*\\s+])-?\\d*(?=[=(),*+\\s]|$)"
    name: constant.numeric.hlasm
  asmSpecialStatements:
    # allows for special assembler statements
    match: "(?<=[=(),*+\\s])=?\\d*(A|B|C|D|E|F|G|H|P|V|X|Z)(L\\d*)?(?=[=(),*\\s+]|$)"
    name: support.type.hlasm
  sequenceNumbers:
    name: constant.numeric.hlasm
    match: ".*"
scopeName: source.hlasm
